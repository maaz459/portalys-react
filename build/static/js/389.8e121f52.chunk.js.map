{"version":3,"file":"static/js/389.8e121f52.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: chainConfig.chainId,\n              chainName: chainConfig.displayName,\n              rpcUrls: [chainConfig.rpcTarget],\n              blockExplorerUrls: [chainConfig.blockExplorer],\n              nativeCurrency: {\n                name: chainConfig.tickerName,\n                symbol: chainConfig.ticker,\n                decimals: chainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","BaseEvmAdapter","_inherits","_classCallCheck","_createClass","key","value","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","_authenticateUser","provider","status","ADAPTER_STATUS","_context2","WalletLoginError","_this$chainConfig","chainNamespace","chainId","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","params","signedMessage","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","_disconnectSession","_get","_context3","clearToken","_disconnect","rehydrated","emit","ADAPTER_EVENTS","BaseAdapter","MetamaskAdapter","args","_this","_defineProperty","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","get","metamaskProvider","set","options","_context","detectEthereumProvider","WalletInitializationError","log","autoConnect","connect","_connect","adapter","switchChain","_this2","disconnect","reconnected","_args3","cleanup","removeAllListeners","_getUserInfo","_context4","_context5","code","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","decimals"],"sourceRoot":""}