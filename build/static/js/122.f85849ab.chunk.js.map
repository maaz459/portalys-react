{"version":3,"file":"static/js/122.f85849ab.chunk.js","mappings":"kUAEgBA,EAAKC,EAA4CC,EAAkBC,GACjF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBH,EAAQ,EACVI,YAAWC,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAAAC,EAAAA,KAAAA,EACUR,IAAU,QAAvBS,EAAO,EAAH,OACAL,EAAQK,GACbA,GACHV,EAAKC,EAAUC,EAAUC,EAAQ,GAC9BQ,MAAK,SAACC,GAEL,OADAP,EAAQO,GACDA,CACT,IACCC,OAAM,SAACC,GAAG,OAAKR,EAAOQ,E,IAAM,sC,KAChCZ,GAEHG,GAAQ,EAEZ,GACF,CAEO,IAAMU,EAAc,eAAGC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,QAAAC,EAAAA,UAAA,iEAGmE,GAF/FC,EAA+C,gCAAEhB,SAAU,IAAMC,MAAO,KAE3B,qBAAXgB,UAAkD,QAAvB,EAAEA,OAAeC,cAAM,QAArBC,EAAuBC,YAC9D,CAAFC,EAAAA,KAAAA,EAAA,aACZJ,EAAAA,OAAAA,SAAAA,OAAeC,QAAM,cAAAG,EAAAA,KAAAA,EAELvB,GAAK,wBAA4B,QAA5B,EAAOmB,OAAeC,cAAM,aAArBI,EAAuBF,SAAS,GAAEJ,EAAQhB,SAAUgB,EAAQf,OAAM,OAAvF,IAAG,EAAH,KACA,CAAFoB,EAAAA,KAAAA,EAAA,aAAUJ,EAAAA,OAAAA,SAAAA,OAAeC,QAAM,gCACvC,MAAI,uC,KACZ,kBAV0B,mC,0bCM3B,IAAaK,EAAe,aAAAC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,+BAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAAA,sDAAAC,EAAAA,GAAAA,UAAAA,GAyIzB,OAzIyBC,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAAAC,EAAAA,EAAAA,IACFC,EAAAA,EAAAA,GAAAA,GAAAA,OAAAA,EAAAA,GAAAA,UAAuBD,EAAAA,EAAAA,IAEGE,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,EAAAA,GAAAA,SAAyBF,EAAAA,EAAAA,IAEtBG,EAAAA,EAAAA,GAAAA,GAAAA,wBAAAA,EAAAA,GAAAA,SAAuBH,EAAAA,EAAAA,IAErCI,EAAAA,EAAAA,GAAAA,GAAAA,OAAAA,EAAAA,GAAAA,WAAyBJ,EAAAA,EAAAA,IAE3BK,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,EAAAA,GAAAA,YAAwBL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,UAEb,OAAIA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,kBAEM,OAAIA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,iBAoHtC,WAClBD,EAAKO,UACPP,EAAKO,QAAQC,IAAI,aAAcR,EAAKS,eACpCT,EAAKU,YAAa,EAElBV,EAAKW,OAASX,EAAKW,SAAWL,EAAAA,GAAAA,UAA2BA,EAAAA,GAAAA,MAAuBA,EAAAA,GAAAA,UAChFN,EAAKY,KAAKC,EAAAA,GAAAA,c,IAEb,EAVA,OAUAC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAC,IAAAA,oBAAAC,IA1HD,WAAqB,MACnB,QAAsB,QAAZ,EAAAC,KAAKV,eAAO,QAAZW,EAAcC,aAAeF,KAAKN,SAAWL,EAAAA,GAAAA,UACzD,GAAC,CAAAS,IAAAA,WAAAC,IAED,WAAY,MACV,OAA2B,QAApB,EAAAC,KAAKG,uBAAe,aAApBC,EAAsBC,WAAY,I,EAC1CC,IAED,SAAaC,GACX,MAAM,IAAIC,MAAM,kBAClB,GAAC,CAAAV,IAAAA,OAAAW,MAAAA,WAAA,wBAED,WAAWrC,GAA2B,wEAAAT,EAAAA,KAAAA,GAAA,mDACnBS,GAAO,OACgB,OAAxCsC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,kCAAAA,MAAAA,KAAAA,MAAwC/C,EAAAA,KAAAA,EACnBM,EAAe,CAAEb,SAAU,IAAKC,MAAO,IAAI,OAApD,GAAZ2C,KAAKV,QAAU,EAAH,KACPU,KAAKV,QAAS,CAAF3B,EAAAA,KAAAA,EAAA,YAAQgD,EAAAA,GAAAA,eAAwC,OAMrB,GAL5CX,KAAKG,gBAAkB,IAAIS,EAAAA,wBAAwB,CAAEC,OAAQ,CAAEC,YAAad,KAAKc,eACjFd,KAAKN,OAASL,EAAAA,GAAAA,MACdW,KAAKL,KAAKC,EAAAA,GAAAA,MAAsBX,EAAAA,GAAAA,SAAyBtB,EAAAA,KAAAA,GAGvDoD,EAAAA,GAAAA,MAAU,iCACN3C,EAAQ4C,YAAa,CAAFrD,EAAAA,KAAAA,GAAA,MACE,OAAvBqC,KAAKP,YAAa,EAAK9B,EAAAA,KAAAA,GACjBqC,KAAKiB,UAAS,QAAAtD,EAAAA,KAAAA,GAAA,cAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,IAGtBoD,EAAAA,GAAAA,MAAU,iDAAwDpD,EAAAA,IAClEqC,KAAKL,KAAK,UAAiBhC,EAAAA,IAAC,sD,KAE/B,mDArBA8C,IAqBA,CAAAX,IAAAA,UAAAW,MAAAA,WAAA,IAEDS,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAI+E,GAJ/EC,EAAAA,KAAAA,GAEIT,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,8BAAAA,MAAAA,KAAAA,MACAV,KAAKN,OAASL,EAAAA,GAAAA,WACdW,KAAKL,KAAKC,EAAAA,GAAAA,WAA2B,CAAEwB,QAASnC,EAAAA,GAAAA,UAE3Ce,KAAKV,QAAS,CAAF6B,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,GAAAA,eAAwC,UAC5DX,KAAKV,QAAQY,YAAa,CAAFiB,EAAAA,KAAAA,GAAA,MAC4B,OAAjDE,EAAmBrB,KAAKV,QAAQgC,kBAAiBH,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,GAE/C,IAAI7D,SAAyC,SAACC,EAASC,GAC3D,IAAMyD,EAAO,eAAGM,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,wEAAA9C,EAAAA,KAAAA,EACR+C,EAAKC,oBAAoBD,EAAKlC,SAAkC,OACtE/B,EAAQiE,EAAKnB,UAAU,sC,KACxB,kBAHY,+B,CAAA,GAIRmB,EAAKlC,SAIVkC,EAAKlC,QAAQoC,KAAK,UAAWT,GAE5BO,EAAKlC,QAAmCgC,kBAAoB,WAC3D9D,EAAOmD,EAAAA,GAAAA,gBAA0C,2BADc7B,EAAe,yBAAfA,EAAe,gBAE9E,OAAOuC,EAAiBM,MAAMH,EAAKlC,QAASR,E,EAG9C0C,EAAKlC,QAAQ2B,UAAUlD,OAAM,SAAC6D,GAC5BpE,EAAOoE,EACT,KAZEpE,EAAOmD,EAAAA,GAAAA,eAaX,IAAE,QAAAQ,EAAAA,KAAAA,GAAA,iBAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,KAEEA,EAAAA,cAAiBU,EAAAA,IAAa,CAAAV,EAAAA,KAAAA,GAAA,+BAC5BW,EAAAA,GAAAA,gBAAkCX,OAAAA,EAAAA,SAAAA,IAAAA,EAAAA,QAAAA,EAAAA,EAAAA,GAAiBY,SAAQ,QAEf,OAFeZ,EAAAA,KAAAA,GAEjEnB,KAAKV,QAAQgC,kBAAoBD,EAAiB,qBAAAF,EAAAA,KAAAA,GAAA,qBAAAA,EAAAA,KAAAA,GAG9CnB,KAAKyB,oBAAoBzB,KAAKV,SAAQ,WAGzCU,KAAKV,QAAQ0C,UAAW,CAAFb,EAAAA,KAAAA,GAAA,YAAQW,EAAAA,GAAAA,kBAAkC,QACnB,OAAlD9B,KAAKV,QAAQ2C,GAAG,aAAcjC,KAAKR,eAE5B2B,EAAAA,OAAAA,SAAAA,KAAKd,UAAQ,QAKqB,MALrBc,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAGpBnB,KAAKN,OAASL,EAAAA,GAAAA,MACdW,KAAKP,YAAa,EAClBO,KAAKL,KAAKC,EAAAA,GAAAA,QAA8BuB,EAAAA,IAAC,uE,KAG5C,kDArDAV,IAqDA,CAAAX,IAAAA,aAAAW,MAAAA,WAAA,IAEDyB,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,MAAAC,EAAAC,EAAAA,UAAA,iEAAmE,OAAlDhE,EAAgCgE,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAEC,SAAS,GAAOC,EAAAA,KAAAA,GAAA,+EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAGzD,QAHyD,EAGzDtC,KAAKV,eAAL,eAAciD,aAAY,OAK/B,OAJGnE,EAAQiE,UACVrC,KAAKN,OAASL,EAAAA,GAAAA,UACdW,KAAKG,gBAAkB,KACvBH,KAAKV,QAAU,MAChBgD,EAAAA,KAAAA,GAAA,iEAAAA,EAAAA,KAAAA,GAAA,cAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAGDtC,KAAKL,KAAKC,EAAAA,GAAAA,QAAwBkC,EAAAA,GAAAA,mBAAmC,OAAC,EAAD,yBAAEQ,EAAiBP,GAAAA,UAAU,qD,KAErG,kDAfAtB,IAeA,CAAAX,IAAAA,cAAAW,MAAAA,WAAA,IAED+B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,oEACOxC,KAAKyC,kBAAmB,CAAFC,EAAAA,KAAAA,EAAA,YAAQZ,EAAAA,GAAAA,kBAAmC,yDAAwD,gCACvH,CAAC,GAAC,2C,KACV,kDALArB,IAKA,CAAAX,IAAAA,sBAAAW,MAAAA,WAAA,wBAEO,WAA0BkC,GAAwC,oEACnE3C,KAAKG,gBAAiB,CAAFyC,EAAAA,KAAAA,EAAA,YAAQd,EAAAA,GAAAA,gBAAiC,uBAAsB,cAAAc,EAAAA,KAAAA,EAClF5C,KAAKG,gBAAgB0C,cAAcF,GAAiB,OAEsE,OADhI3C,KAAKN,OAASL,EAAAA,GAAAA,UACdW,KAAKL,KAAKC,EAAAA,GAAAA,UAA0B,CAAEwB,QAASnC,EAAAA,GAAAA,QAAyB6D,YAAa9C,KAAKP,aACnFmD,EAAAA,OAAAA,SAAAA,KAAKvC,UAAQ,2C,KACrB,mDARAI,MAQA,EA/HyB,CAAQsC,EAAAA,E","sources":["../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","_asyncToGenerator","_context","done","then","res","catch","err","detectProvider","_ref2","_args2","options","window","solana","_window$solana","isPhantom","_context2","_window$solana2","PhantomAdapter","_inherits","_classCallCheck","args","_this","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","_wallet","off","_onDisconnect","rehydrated","status","emit","ADAPTER_EVENTS","_createClass","key","get","this","_this$_wallet","isConnected","phantomProvider","_this$phantomProvider","provider","set","_","Error","value","_get","WalletInitializationError","PhantomInjectedProvider","config","chainConfig","log","autoConnect","connect","_connect","_context3","adapter","handleDisconnect","_handleDisconnect","_ref","_this2","connectWithProvider","once","apply","reason","Web3AuthError","WalletLoginError","message","publicKey","on","_disconnect","_this$_wallet2","_args4","cleanup","_context4","disconnect","_getUserInfo","isWalletConnected","_context5","injectedProvider","_context6","setupProvider","reconnected","BaseSolanaAdapter"],"sourceRoot":""}